%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2406 1869
%%HiResBoundingBox: 0 0 2405.04 1868.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2405.04 1868.88 re
W
q
[0.24 0 0 -0.24 0 1868.88] cm
q
0 0 10020.833 7783.5654 re
W*
q
[22.667086 0 0 22.663044 2747.6477 323.19717] cm
q
100.253998 0 m
44.973999 0 0 44.973999 0 100.253998 c
0 155.533997 44.973999 200.508 100.253998 200.508 c
155.533997 200.508 200.508 155.533997 200.508 100.253998 c
200.508 44.973999 155.533997 0 100.253998 0 c
h
100.253998 195.508 m
47.730999 195.508 5 152.776993 5 100.253998 c
5 47.731003 47.730999 5 100.253998 5 c
152.776993 5 195.508 47.73 195.508 100.253998 c
195.508 152.778 152.776993 195.508 100.253998 195.508 c
h
W
[200.508007 0 0 200.507994 -0.0000000962341 -0.00000322993] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[57.164692 0 0 57.154491 3733.6572 389.56726] cm
q
40.43 60 m
27.188 60 l
15.967 41.542999 l
15.967 60 l
4.805 60 l
4.805 16.933998 l
21.299 16.933998 l
31.612 16.933998 35.712997 22.851997 35.712997 30.234997 c
35.712997 36.299496 32.138798 39.844398 26.982498 40.957996 c
40.43 60 l
h
25.077999 30.351999 m
25.077999 27.7153 23.583899 26.045399 19.452999 26.045399 c
15.9667 26.045399 l
15.9667 34.688 l
19.452999 34.688 l
23.583899 34.688 25.077999 32.9888 25.077999 30.3521 c
25.077999 30.351999 l
h
W
[35.625 0 0 43.066003 4.804999 16.933991] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[19.014862 0 0 19.011471 262.40512 5306.104] cm
q
23.92 22.200001 m
23.92 26.76 21.959999 30.440001 17.92 31.800001 c
23.68 40 l
18.52 40 l
13.16 32.400002 l
7.52 32.400002 l
7.52 40 l
3.2 40 l
3.2 12 l
14.08 12 l
20.719999 12 23.92 16.360001 23.92 22.200001 c
h
7.52 16.08 m
7.52 28.32 l
13.96 28.32 l
18 28.32 19.6 25.439999 19.6 22.200001 c
19.6 18.960003 18 16.080002 13.960001 16.080002 c
7.520001 16.080002 l
7.52 16.08 l
h
52.695999 35.84 m
52.975998 40 l
35.815998 40 l
35.815998 12 l
52.175999 12 l
52.495998 16.16 l
40.135998 16.16 l
40.135998 22.119999 l
48.295998 22.119999 l
48.295998 26.279999 l
40.135998 26.279999 l
40.135998 35.84 l
52.695999 35.84 l
h
62.872002 37.119999 m
64.552002 38.68 68.312004 40.399998 72.031998 40.399998 c
77.792 40.399998 81.311996 37.559998 81.311996 32.919998 c
81.311996 29.079998 79.391998 26.799999 73.751999 23.48 c
69.351997 20.879999 68.311996 20.119999 68.311996 18.599998 c
68.311996 16.999998 69.751999 15.759998 72.472 15.759998 c
73.991997 15.759998 76.232002 16.439999 77.472 17.279999 c
79.792 13.759998 l
77.952003 12.519999 74.792 11.599999 72.512001 11.599999 c
67.192001 11.599999 63.712002 14.639998 63.712002 18.639999 c
63.712002 22.16 65.391998 23.92 70.592003 26.799999 c
74.792 29.119999 76.712006 31.08 76.712006 32.84 c
76.712006 35 74.992004 36.080002 72.032005 36.080002 c
69.232002 36.080002 66.592003 34.760002 65.352005 33.640003 c
62.872002 37.119999 l
h
110.528 16.16 m
102.648003 16.16 l
102.648003 40 l
98.328003 40 l
98.328003 16.16 l
90.408005 16.16 l
90.688004 12 l
110.248001 12 l
110.528 16.16 l
h
138.904007 40 m
136.70401 34.880001 l
125.264008 34.880001 l
123.064011 40 l
118.424011 40 l
130.744019 11.6 l
131.224014 11.6 l
143.544006 40 l
138.904007 40 l
h
126.984001 30.879999 m
134.984009 30.879999 l
130.984009 21.599998 l
126.984001 30.879999 l
h
153.639999 28.879999 m
153.639999 12 l
157.919998 12 l
157.919998 28.559999 l
157.919998 33.439999 160.839996 36.040001 164.839996 36.040001 c
168.84 36.040001 171.75999 33.440002 171.75999 28.560001 c
171.75999 12.000002 l
176.03999 12.000002 l
176.03999 28.880001 l
176.03999 36.16 171.75999 40.400002 164.839996 40.400002 c
157.919998 40.400002 153.639999 36.160004 153.639999 28.880001 c
153.639999 28.879999 l
h
209.65601 22.200001 m
209.65601 26.76 207.696 30.440001 203.65601 31.800001 c
209.416 40 l
204.256 40 l
198.896 32.400002 l
193.256 32.400002 l
193.256 40 l
188.93599 40 l
188.93599 12 l
199.81599 12 l
206.45599 12 209.65599 16.360001 209.65599 22.200001 c
209.65601 22.200001 l
h
193.256 16.08 m
193.256 28.32 l
199.696 28.32 l
203.73599 28.32 205.336 25.439999 205.336 22.200001 c
205.336 18.960003 203.73599 16.080002 199.696 16.080002 c
193.256 16.080002 l
193.256 16.08 l
h
239.23199 40 m
237.032 34.880001 l
225.592 34.880001 l
223.392 40 l
218.752 40 l
231.07199 11.6 l
231.55199 11.6 l
243.87198 40 l
239.23198 40 l
239.23199 40 l
h
227.312 30.879999 m
235.312 30.879999 l
231.312 21.599998 l
227.312 30.879999 l
h
272.92801 12 m
277.24802 12 l
277.24802 40.400002 l
276.76801 40.400002 l
258.48801 22.040001 l
258.48801 40 l
254.168 40 l
254.168 11.6 l
254.64799 11.6 l
272.92801 29.960001 l
272.92801 12.000002 l
272.92801 12 l
h
308.064 16.16 m
300.18399 16.16 l
300.18399 40 l
295.86398 40 l
295.86398 16.16 l
287.94397 16.16 l
288.22397 12 l
307.78397 12 l
308.064 16.16 l
h
323.07999 35.84 m
334.47998 35.84 l
334.19998 40 l
318.75998 40 l
318.75998 12 l
323.07999 12 l
323.07999 35.84 l
h
358.496 40.400002 m
350.496 40.400002 344.056 34 344.056 26.000002 c
344.056 18.000004 350.496 11.600002 358.496 11.600002 c
366.496 11.600002 372.936 18.000002 372.936 26.000002 c
372.936 34 366.496 40.400002 358.496 40.400002 c
h
358.496 36.240002 m
364.25601 36.240002 368.45599 31.880001 368.45599 26.000002 c
368.45599 20.120003 364.25598 15.760002 358.496 15.760002 c
352.73602 15.760002 348.53601 20.120003 348.53601 26.000002 c
348.53601 31.880001 352.73602 36.240002 358.496 36.240002 c
h
382.51199 12 m
387.23199 12 l
394.952 30.84 l
402.672 12 l
407.392 12 l
395.19199 40.400002 l
394.71198 40.400002 l
382.51199 12 l
h
434.96799 35.84 m
435.24799 40 l
418.08798 40 l
418.08798 12 l
434.448 12 l
434.76801 16.16 l
422.40802 16.16 l
422.40802 22.119999 l
430.56802 22.119999 l
430.56802 26.279999 l
422.40802 26.279999 l
422.40802 35.84 l
434.96802 35.84 l
434.96799 35.84 l
h
467.46399 22.200001 m
467.46399 26.76 465.504 30.440001 461.46399 31.800001 c
467.224 40 l
462.064 40 l
456.70401 32.400002 l
451.064 32.400002 l
451.064 40 l
446.74399 40 l
446.74399 12 l
457.62399 12 l
464.26401 12 467.46399 16.360001 467.46399 22.200001 c
h
451.064 16.08 m
451.064 28.32 l
457.504 28.32 l
461.54401 28.32 463.14401 25.439999 463.14401 22.200001 c
463.14401 18.960003 461.54401 16.080002 457.504 16.080002 c
451.064 16.080002 l
451.064 16.08 l
h
477.76001 37.119999 m
479.44 38.68 483.20001 40.399998 486.92001 40.399998 c
492.68002 40.399998 496.20001 37.559998 496.20001 32.919998 c
496.20001 29.079998 494.28 26.799999 488.64001 23.48 c
484.24002 20.879999 483.20001 20.119999 483.20001 18.599998 c
483.20001 16.999998 484.64001 15.759998 487.36002 15.759998 c
488.88 15.759998 491.12003 16.439999 492.36002 17.279999 c
494.68002 13.759998 l
492.84003 12.519999 489.68002 11.599999 487.40002 11.599999 c
482.08002 11.599999 478.60004 14.639998 478.60004 18.639999 c
478.60004 22.16 480.28003 23.92 485.48004 26.799999 c
489.68005 29.119999 491.60004 31.08 491.60004 32.84 c
491.60004 35 489.88004 36.080002 486.92004 36.080002 c
484.12006 36.080002 481.48004 34.760002 480.24005 33.640003 c
477.76001 37.119999 l
h
W
[493.000005 0 0 28.800001 3.200001 11.600009] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
q
[73.382355 0 0 73.36927 1335.83179 6026.7329] cm
q
2.5 18.700001 m
2.5 8.06 l
2.5 7.6 2.86 7.360001 3.2 7.360001 c
7.8 7.360001 l
8.24 7.360001 8.46 7.680001 8.46 8.020001 c
8.46 8.360001 8.24 8.700001 7.8 8.700001 c
3.84 8.700001 l
3.84 12.580001 l
6.980001 12.580001 l
7.440001 12.580001 7.66 12.900001 7.66 13.240001 c
7.66 13.580001 7.42 13.940001 6.980001 13.940001 c
3.84 13.940001 l
3.84 18.08 l
7.8 18.08 l
8.22 18.08 8.440001 18.42 8.440001 18.74 c
8.440001 19.08 8.22 19.4 7.800001 19.4 c
3.200001 19.4 l
2.860001 19.4 2.500001 19.279999 2.500001 18.699999 c
2.5 18.700001 l
h
21.167 18.860001 m
20.386999 16.32 l
16.667 16.32 l
15.927 18.82 l
15.667 19.68 14.347 19.42 14.627 18.539999 c
15.667 15.039999 16.687 11.48 17.707001 7.939999 c
17.827002 7.559999 18.147001 7.359999 18.467001 7.359999 c
18.767 7.359999 19.087002 7.559999 19.207001 7.939999 c
22.387001 18.539999 l
22.607 19.299999 21.427002 19.719999 21.167002 18.859999 c
21.167 18.860001 l
h
18.507 10.06 m
17.066999 14.980001 l
20.007 14.980001 l
19.507 13.3 19.047001 11.860001 18.507 10.06 c
h
28.714001 7.36 m
34.754002 7.36 l
35.174 7.36 35.374001 7.7 35.374001 8.04 c
35.374001 8.379999 35.174 8.7 34.754002 8.7 c
32.474003 8.7 l
32.474003 18.76 l
32.474003 19.18 32.134003 19.4 31.794003 19.4 c
31.454002 19.4 31.134003 19.18 31.134003 18.76 c
31.134003 8.7 l
28.714003 8.7 l
28.294003 8.7 28.094002 8.38 28.094002 8.04 c
28.094002 7.7 28.294003 7.36 28.714003 7.36 c
28.714001 7.36 l
h
51.548 18.719999 m
51.548 7.999999 l
51.548 7.679999 51.708 7.359999 52.147999 7.359999 c
54.767998 7.359999 l
56.747997 7.359999 57.827999 8.079999 57.827999 10.079999 c
57.827999 10.879999 57.728001 11.659999 57.228001 12.199999 c
58.368 12.999999 58.568001 14.379999 58.568001 15.779999 c
58.568001 18.239998 57.228001 19.399998 54.928001 19.399998 c
52.248001 19.399998 l
51.908001 19.399998 51.548 19.279997 51.548 18.719997 c
51.548 18.719999 l
h
52.888 18.08 m
54.628002 18.08 l
56.288002 18.08 57.208 17.4 57.208 15.78 c
57.208 14.12 56.788002 13 55.167999 13 c
52.888 13 l
52.888 18.08 l
h
56.507999 10.08 m
56.507999 8.88 55.667999 8.7 54.767998 8.7 c
52.887997 8.7 l
52.887997 11.66 l
54.727997 11.66 l
55.987995 11.66 56.507996 11.3 56.507996 10.08 c
56.507999 10.08 l
h
65.294998 18.700001 m
65.294998 8.06 l
65.294998 7.6 65.654999 7.360001 65.994995 7.360001 c
70.594994 7.360001 l
71.034996 7.360001 71.254997 7.680001 71.254997 8.020001 c
71.254997 8.360001 71.034996 8.700001 70.594994 8.700001 c
66.634995 8.700001 l
66.634995 12.580001 l
69.774994 12.580001 l
70.234993 12.580001 70.454994 12.900001 70.454994 13.240001 c
70.454994 13.580001 70.214996 13.940001 69.774994 13.940001 c
66.634995 13.940001 l
66.634995 18.08 l
70.594994 18.08 l
71.014992 18.08 71.234993 18.42 71.234993 18.74 c
71.234993 19.08 71.014992 19.4 70.594994 19.4 c
65.994995 19.4 l
65.654999 19.4 65.294998 19.279999 65.294998 18.699999 c
65.294998 18.700001 l
h
77.821999 17.68 m
77.381996 16.860001 78.501999 16.26 79.021996 17.08 c
79.281998 17.5 80.061996 18.219999 81.301994 18.219999 c
81.821991 18.219999 83.121994 17.84 83.301994 16.359999 c
83.421997 15.459999 82.561996 14.579999 81.081993 13.839998 c
79.001991 12.859999 77.421989 11.999998 77.421989 10.279999 c
77.421989 8.239999 79.141991 7.279999 80.981987 7.279999 c
82.641991 7.279999 83.561989 8.299999 83.881989 8.819999 c
84.341988 9.559999 83.341988 10.279999 82.78199 9.559999 c
82.501991 9.199999 81.96199 8.599999 80.981987 8.599999 c
79.881989 8.599999 78.741989 9.119999 78.741989 10.279999 c
78.741989 11.199999 79.761986 11.719999 81.28199 12.439999 c
83.061989 13.319999 84.921989 14.179998 84.641991 16.519999 c
84.421989 18.359999 83.021988 19.539999 81.301994 19.539999 c
80.001991 19.539999 78.401993 18.839998 77.821991 17.679998 c
77.821999 17.68 l
h
90.988998 7.36 m
97.028999 7.36 l
97.448997 7.36 97.649002 7.7 97.649002 8.04 c
97.649002 8.379999 97.449005 8.7 97.028999 8.7 c
94.749001 8.7 l
94.749001 18.76 l
94.749001 19.18 94.409004 19.4 94.069 19.4 c
93.728996 19.4 93.408997 19.18 93.408997 18.76 c
93.408997 8.7 l
90.988998 8.7 l
90.569 8.7 90.368996 8.38 90.368996 8.04 c
90.368996 7.7 90.568993 7.36 90.988998 7.36 c
h
W
[95.149002 0 0 12.260001 2.5 7.280002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1.014682 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc3_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc3_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc3_0 } {
0.5 sub 2 mul 0 add xpdfFunc3_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
